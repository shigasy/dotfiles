## ref: https://qiita.com/sfus/items/063797a1dd8fdc7d032f
## ref: https://qiita.com/akinoriikeda/items/62467a0906d95a3a3e04

### -------- Color --------
color default           250             234
color 'Author '         15              default
color 'Commit: '        242             default
color 'Merge: '         45              default
color id                167             default
color date              242             default
color graph-commit      161             default
color status            15              default
color delimiter         90              default
color cursor            234             7
color help-group        161             default
color main-tracked      105             default             bold
color cursor            226             94
color title-focus       234             250
color title-blur        234             250
color diff-stat         45              default
color diff-index        14              default
color diff-add          40              default
color diff-del          161             default
color diff-chunk        190             default


### -------- view関連 --------
# main view の表示設定 commit id を追加
set main-view = id date author commit-title:graph=yes,refs=yes

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author id:yes,color line-number:yes,interval=1 text

# Pager系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no


### -------- 基本設定 --------
# utf-8 文字で画面描画する (~でトグル)
set line-graphics = utf-8

# タブサイズ
set tab-size = 4

# 空白無視 (status-view では表示するが diff-view では無視する) (W でトグル)
set ignore-space = at-eol

# 水平分割したウィンドウの下画面サイズを % で指定（行数指定も可）
set split-view-height = 80%

# マージ diff を表示するマージコミットにはdiffがないから
set diff-options = -m --first-parent

# リフレッシュするタイミング
set refresh-mode = auto

# 差分表示に diff-highlight を使う (要 tig 2.2.1 以降. diff-highlight が $PATH にあること) 似ている行の誤差をハイライトで示してくれる
set diff-highlight = true


### -------- keybind --------
# デフォルトの bind main G を無効化する
bind main G none

# 最初の行に移動
bind generic g move-first-line
# 最後の行に移動
bind generic G move-last-line

bind generic E      view-grep

### -------- git extends --------
# F で fetch (default: :toggle file-name / :toggle commit-title-refs)
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

# U で pull
bind generic U      ?git pull %(remote)

# P で remote への push
bind generic P      ?git push -u %(remote) %(repo:head)

# C で commit (refs での C は checkout, main での C は cherry-pick だが上書きする)
bind generic C      !git commit
bind refs    C      !git commit
bind main    C      !git commit

# A で all commit
bind status  A      !git add --all

# Alt-c で commit --allow-empty
bind generic <Esc>c !git commit --allow-empty

# + で commit --amend
bind generic +      !git commit --amend --allow-empty

# ^ で reset --soft
# ^ で直前のコミットをステージング状態に戻せるようにしている
bind generic ^      ?git reset --soft HEAD^

# H で reset --hard
bind main    H      ?git reset --hard %(commit)
bind diff    H      ?git reset --hard %(commit)
bind refs    H      ?git reset --hard %(branch)

# H で reset --hard HEAD (status-view)
bind status  H      ?git reset --hard HEAD
# S で stash save
bind generic S      ?git stash save "%(prompt Enter stash comment: )"

# Y で stash pop
bind diff    Y      ?git stash pop %(stash)
bind stash   Y      ?git stash pop %(stash)

# . で HEAD との diff
bind main    .      !sh -c "git diff %(commit) | tig"
bind diff    .      !sh -c "git diff %(commit) | tig"
bind refs    .      !sh -c "git diff %(branch) | tig"

# 良い感じにDで消す
# D でブランチを削除 (マージ済みブランチのみ. 強制削除(branch -D) は `!`) (refs-view)
bind refs    D      ?git branch -d %(branch)

# D でトラッキングされていないファイルを削除 (status-view)
bind status  D      ?git clean -d -f -- %(file)

# ! でトラッキングされているファイルをcheckout
bind status  !      ?git checkout %(file)

# D で stash を削除 (`!` と同じ) (stash-view)
bind stash   D      ?git stash drop %(stash)

# D でファイルを削除 (tree-view)
bind tree    D      ?git rm %(file)

# x でトラッキングされていないファイルをすべて削除
bind main    x      ?git clean -d -f
bind status  x      ?git clean -d -f

# x でマージ済みローカルブランチをすべて削除 (master/develop 除く)
bind refs    x      ?sh -c "git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %"

# ` で commit ID をクリップボードにコピー (Mac用)
bind generic `      @bash -c "echo -n '%(commit)' | pbcopy"

# ` でファイルパスをクリップボードにコピー (Mac用)
bind stage   `      @bash -c "echo -n '%(file)' | pbcopy"
bind status  `      @bash -c "echo -n '%(file)' | pbcopy"
bind tree    `      @bash -c "echo -n '%(file)' | pbcopy"
bind blob    `      @bash -c "echo -n '%(file)' | pbcopy"

# ! で revert
bind main    !      ?git revert %(commit)

# O で cherry-pick (default: 'C')
bind main    O      ?git cherry-pick %(commit)
bind diff    O      ?git cherry-pick %(commit)

# Alt-k で cherry-pick -n (--no-commit)
bind main    <Esc>k ?git cherry-pick -n %(commit)
bind diff    <Esc>k ?git cherry-pick -n %(commit)

## 以下、Shift付きでブランチ指定、Alt付きでコミットID指定のコマンド

# = で checkout
bind main    =      ?git checkout %(branch)
bind refs    =      ?git checkout %(branch)
bind main    <Esc>= ?git checkout %(commit)

# - で直前のブランチに戻る (checkout -)
bind generic -      ?git checkout -

# B でブランチを作成してそのブランチに移動 (checkout -b)
bind main    B      ?git checkout -b "%(prompt Enter branch name: )" %(branch)
bind refs    B      ?git checkout -b "%(prompt Enter branch name: )" %(branch)
bind main    <Esc>b ?git checkout -b "%(prompt Enter branch name: )" %(commit)

# M で merge
bind main    M      ?git merge %(branch)
bind diff    M      ?git merge %(branch)
bind refs    M      ?git merge %(branch)
bind main    <Esc>m ?git merge %(commit)
bind diff    <Esc>m ?git merge %(commit)

# R で rebase
bind main    R      ?git rebase %(branch)
bind diff    R      ?git rebase %(branch)
bind refs    R      ?git rebase %(branch)
bind main    <Esc>r ?git rebase %(commit)
bind diff    <Esc>r ?git rebase %(commit)

# I で rebase -i
bind main    I      ?git rebase -i %(branch)
bind diff    I      ?git rebase -i %(branch)
bind refs    I      ?git rebase -i %(branch)
bind main    <Esc>i ?git rebase -i %(commit)
bind diff    <Esc>i ?git rebase -i %(commit)
